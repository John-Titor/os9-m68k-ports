    nam gftick
    ttl goldfish RTC tick driver

********************
* System tick driver using the Goldfish virtual RTC
*
* TODO:
*   Remember the time the last tick was set for and set the new deadline
*   based on that rather than the current time.
*   Support tick rates other than the hard-coded 100Hz.

Edition equ 1

    psect Ticker,0,0,0,0,0
    use defsfile
    use <os9svc.m>

********************
* registers
*
** registers

_TIME_LOW        equ $00
_TIME_HIGH       equ $04
_ALARM_LOW       equ $08
_ALARM_HIGH      equ $0c
_IRQ_ENABLED     equ $10
_CLEAR_ALARM     equ $14
_ALARM_STATUS    equ $18
_CLEAR_INTERRUPT equ $1c

* PIC enable register XXX should be less magic
_PIC_ENABLE     equ $ff005010
_PIC_MASK       equ $00000001


********************
* Expected variables and constants:
* 
* The following constants are used in the generic
* code and must be defined GLOBALLY by this file:
*
TiksPerSec: equ TicksSec (Ticks Per Second) - Pretty self-explanatory.
ClockVect: equ ClkVect clock vector
ClockPort: equ ClkPort tick device base address
ClockPrior: equ ClkPrior clock priority

********************
* StartTick: (Subroutine) Initialize
*            the "ticker" device hardware
*            and enable it to produce "tick" IRQs
*
* General Description: This subroutine is called by the "tickgeneric"
*                      initialization code.  The purpose of this
*                      subroutine is to program the hardware registers
*                      of the "ticker" device so that it will produce
*                      "tick" interrupts at the rate specified by the
*                      variable "TicksSec" - ticks per second.  This
*                      variable is generally defined in "systype.d"
*                      and is often set to a value of 100 ticks per
*                      second.
*
* Registers Passed: (a3) = The base address of the "ticker" hardware
*                   (a5) = Caller's register stack pointer
*                   (a6) = Global storage pointer
*
* Registers Returned: (d1) = Error code if error occurred
*                            Zero if no error
*                     (cc) = carry set if error occurred
*                            carry clear if no error
*
* NOTE: This subroutine may alter registers d0, d1, a0, a1 and a2 without
*       consequence.  All others MUST be preserved!
*
* ANOTHER NOTE: The tickgeneric code that calls this subroutine DOES NOT
*               MASK the interrupts!  If the initialization code for the
*               tick device needs the interrupts masked, it must be done
*               in THIS subroutine!
*
StartTick:
    OS9svc  F$SysDbg
    move.l  _TIME_LOW(a3),d0        * get the current time, low word first
    move.l  _TIME_HIGH(a3),d1       * ...then latched high word
    add.l   #$5f5e100,d0            * 100ms in nanoseconds
    bcc     StartTick10             * check for carry
    addq.l  #1,d1                   * ... yes, carry
StartTick10:
    move.l  d1,_ALARM_HIGH(a3)      * write new alarm time
    move.l  d0,_ALARM_LOW(a3)       * ... and start it
    move.l  #1,_IRQ_ENABLED(a3)     * enable interrupt
    move.l  #_PIC_MASK,_PIC_ENABLE  * enable tick interrupt in the GF PIC
    moveq.l #0,d1                   * clear the carry flag / return no error
    rts

********************
* TickIRQ: (Interrupt Service Routine)
*
* General Description: Check the "ticker" device hardware
*                      to determine if it caused the interrupt.
*                      If it did, clear the interrupt in the 
*                      "ticker" device hardware.
*                      If it did not cause the interrupt, return
*                      with the carry bit set in the Condition
*                      Code Register to flag that an error occurred.
*
* Registers Passed: (a3) = ticker chip base address
*                   (a6) = system global storage pointer
*
* Registers Returned: (cc) = Carry set if an error occurred
*                            If no error occurred, this routine
*                            does not return, but jumps to the
*                            Kernel's clock handling routine.
*
* Register Usage:  may only destroy D0, D1, A0, A2, A3 and A6.
*                  any other registers used MUST be preserved.
*
TickIRQ:
    move.l  #0,_CLEAR_INTERRUPT(a3) * clear alarm interrupt
    move.l  _TIME_LOW(a3),d0        * get the current time, low word first
    move.l  _TIME_HIGH(a3),d1       * ...then latched high word
    add.l   #$5f5e100,d0            * 100ms in nanoseconds
    bcc     TickIRQ10               * check for carry
    addq.l  #1,d1                   * ... yes, carry
TickIRQ10:
    move.l  d1,_ALARM_HIGH(a3)      * write new alarm time
    move.l  d0,_ALARM_LOW(a3)       * ... and start it
    movea.l D_Clock(a6),a0          * get clock service routine
    jmp (a0)                        * ... and call

    ends                            * psect Ticker

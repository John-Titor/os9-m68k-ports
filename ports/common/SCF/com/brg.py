#!/usr/bin/env python3
#
# Clock table generator
#
#                 CLK
# SPEED = ---------------------
#         OVS * PRESC * DIVISOR
#
# Solve for OVS (16..4), PRESC (31.875..1), DIVISOR (1..65535).
#

# clocks (Hz) to generate tables for.
clocks = [16000000, 7372000, 1843200]

# OS-9 serial speed table; this has to match the Baud* constants
# in io.a / BAUD* constants in <scf.h>.
speeds = [
    50,
    75,
    110,
    134.5,
    150,
    300,
    600,
    1200,
    1800,
    2000,
    2400,
    3600,
    4800,
    7200,
    9600,
    19200,
    38400,
    56000,
    64000,
    31250,
    31250,
    57600,
    115200,
    230400,
    460800,
    921600,
    76800,
    153600,
    307200,
    614400,
    1228800,
]


def emit_table(clock):
    print(f"    ifeq COM_Clk-{clock}")
    print(f"_SpeedTable")
    print(f"*           TCR,DLH,DLL,CPR")
    for speed in speeds:
        best_error = speed
        for oversample in range(16, 4, -1):
            for psx in range(255, 8, -1):
                prescaler = psx / 8
                min_divisor = int(clock / (oversample * prescaler * speed))
                max_divisor = min_divisor + 1
                for divisor in range(min_divisor, max_divisor):
                    if divisor > 0:
                        output = clock / (oversample * prescaler * divisor)
                        error = abs(speed - output)
                        if error < best_error:
                            best_error = error
                            best_oversample = oversample
                            best_prescaler = prescaler
                            best_divisor = divisor
        # 2% max tolerance
        if (best_error / speed) > 0.02:
            print(f"    dc.b    $ff,$ff,$ff,$ff  "
                  f"* {speed} not supported")
        else:
            tcr = 0x00 if (best_oversample == 16) else best_oversample
            dlh = best_divisor >> 8
            dll = best_divisor & 0xff
            cpr = int(best_prescaler * 8)
            print(f"    dc.b    ${tcr:02x},${dlh:02x},${dll:02x},${cpr:02x}  "
                  f"* {speed} error = {best_error * 100 / speed:.2f}%")
    print(f"_MaxSpeed equ (*-_SpeedTable)/4")
    print(f"    endc")


print("* clock tables generated by brg.py - DO NOT EDIT")
for clock in clocks:
    emit_table(clock)

    nam rtccb030.a
    ttl CB030 realtime clock driver
 
Edition equ 1
Revision set 0
Typ_Lang set (Sbrtn<<8)+Objct
Attr_Rev set ((ReEnt+SupStat)<<8)+Revision

    psect rtclock,Typ_Lang,Attr_Rev,Edition,0,RTCTable
    use defsfile

** registers
*
* The RTC is a DS1302 bit-banged using the IP/OP bits on the DUART.
* The Tx pin is diode-isolated, so must be set high to read.
*
* Write to DS1302 on the rising edge, read DS1302 on the falling edge of clock
* The data is shifted in and out least significant bit first, so need to reverse bit order
* when reading or writing data
*
RTCCtrl     equ $1a                     * control register for RTC bit-bang
RTCIn       equ $1a                     * RTC SPI input bits
RTCSetLow   equ $1c                     * set RTC SPI GPIO(s) low
RTCSetHigh  equ $1e                     * set RTC SPI GPIO(s) hig
RTCCE       equ (1<<7)                  * DS1302's CE is connected to OP7
RTCSCLK     equ (1<<6)                  * DS1302's SCK is connected to OP6
RTCDO       equ (1<<5)                  * DS1302's SDA is connected to OP5
RTCDI       equ 5                       * DS1302's SDA input is connected to IP5

RTCWPReg    equ $8e                     * write protect register
RTCWP       equ (1<<7)                  * prite protect bit

** Dispatch table
*
* Called as subroutine by the generic tick code; entry at 0 offset for GetTime,
* 4 offset for SetTime.
*
RTCTable:
    bra.w GetTime

* Defend against the preceding branch instruction being shortened to 2B by 
* assembler or linker optimisation.
    nop

** SetTime
*
* Store a new time/date in the RTC.
*
* Input:
*   (d0)        00hhmmss - hh, mm, ss are byte values, not BCD
*   (d1)        yyyymmdd - yyyy, mm, dd are byte values, not BCD
*   (a3)        ticker base address (not used)
*
* Output:
*   (cc)        carry clear on success
*
SetTime:
* save state and set up
    move.w      sr,-(a7)                        * save SR
    ori.w       #IntMask,sr                     * ... and disable all interrupts
    movem.l     d0-d3/a0,-(a7)                  * save used registers
    move.l      d0,d2                           * save args since d0/d1 will be
    move.l      d1,d3                           * ... trashed before we need them
    movea.l     #RTCPort,a0                     * get base address of bus interface

* verify that the RTC is present and initialise the bus
    bsr         detect                          * configure and check for RTC
    bcs         setExit                         * ... not found

* clear the write-protect bit
    bsr         pause
    move.b      #RTCCE,RTCSetHigh(a0)           * select the device
    move.b      #RTCWPReg,d0                    * address the write protect register
    bsr         putByte
    move.b      #0,d0                           * disable protection
    bsr         putByte
    move.b      #RTCCE|RTCDO|RTCSCLK,RTCSetLow(a0) * deselect the device and idle the bus

* send burst-write command for clock registers
    bsr         pause
    move.b      #RTCCE,RTCSetHigh(a0)           * select the device
    move.b      #$be,d0                         * burst write clock registers
    bsr         putByte                         * send command

* write seconds
    move.b      d2,d0                           * ??????ss
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send seconds byte

* write minutes
    ror.l       #8,d2                           * ss00hhmm
    move.b      d2,d0                           * ??????mm
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send minutes byte

* write hour
    ror.l       #8,d2                           * mmss00hh
    move.b      d2,d0                           * ??????hh
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send hours byte

* write day
    move.b      d3,d0                           * ??????dd
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send day byte

* write month
    asr.l       #8,d3                           * 00yyyymm
    move.b      d3,d0                           * ??????mm
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send month byte

* write dummy day-of-week
    move.b      #1,d0                           * ??????01
    bsr         putByte                         * ... send day-of-week byte

* write year
    asr.l       #8,d3                           * 0000yyyy
    move.l      d3,d0                           * 0000yyyy
    divu        #100,d0                         * 00yy00cc
    swap        d0                              * 00cc00yy
    bsr         binToBCD                        * ... convert
    bsr         putByte                         * ... and send year byte (discard century)

* set the write-protect bit
    move.b      #RTCWP,d0                       * write protect bit
    bsr         putByte                         * ... and send since reg follows year
    move.b      #RTCCE|RTCDO|RTCSCLK,RTCSetLow(a0) * deselect the device and idle the bus
    andi        #NoCarry,ccr                    * success

setExit
* restore saved state and return
    movem.l     (a7)+,d0-d3/a0                  * restore registers
    move.w      (a7)+,sr                        * restore interrupt state
    rts

** GetTime
*
* Fetch the current time and date from the RTC.
*
* If the RTC is not configured correctly, initialize it and return a default time.
*
* Input:
*   (a3)        ticker base address (not used)
*   (a4)        current process descriptor
*   (a5)        caller's register context
*   (a6)        system globals
*
* Output:
*   (d0)        00hhmmss - hh, mm, ss are byte values, not BCD
*   (d1)        yyyymmdd - yyyy, mm, dd are byte values, not BCD
*   (cc)        carry clear on success, set on error
*
GetTime:
* save state and set up
    move.w      sr,-(a7)                        * save SR
    ori.w       #IntMask,sr                     * ... and disable all interrupts
    movem.l     d2-d3/a0,-(a7)                  * save used registers
    movea.l     #RTCPort,a0                     * get base address of bus interface

* verify that the RTC is present and initialise the bus
    bsr         detect                          * check for RTC present
    bcs         getExit                         * ... not found

* send burst-read command for clock registers
    bsr         pause
    move.b      #RTCCE,RTCSetHigh(a0)           * select the device
    bsr         pause
    move.b      #$bf,d0                         * burst read clock registers
    bsr         putByte                         * ... send

* read seconds
    bsr         getByte                         * get seconds byte
    btst        #7,d0                           * check CH bit
    bne         needInit                        * ... set, RTC needs init
    bsr         bcdToBin                        * convert to binary
    clr.l       d2
    move.b      d0,d2                           * 000000ss
    ror.l       #8,d2                           * ss000000

* read minutes
    bsr         getByte                         * get minutes byte
    bsr         bcdToBin                        * convert to binary
    move.b      d0,d2                           * s0000MM
    ror.l       #8,d2                           * mmss0000

* read hours
    bsr         getByte                         * get hour byte
    btst        #7,d0                           * check 12/24 bit
    bne         needInit                        * ... set, RTC needs init
    bsr         bcdToBin                        * convert to binary
    move.b      d0,d2                           * mmss00hh
    swap        d2                              * 00hhmmss

* read day
    bsr         getByte                         * get day-of-month byte
    bsr         bcdToBin                        * convert to binary
    clr.l       d3
    move.b      d0,d3                           * 000000dd
    ror.l       #8,d3                           * dd000000

* read month
    bsr         getByte                         * get month byte
    bsr         bcdToBin                        * convert to binary
    move.b      d0,d3                           * dd0000mm
    ror.l       #8,d3                           * mmdd0000
    bsr         getByte                         * discard day-of-week byte

* read year
    bsr         getByte                         * get year byte
    bsr         bcdToBin                        * convert to binary
    move.w      #2000,d3                        * mmdd07d0
    add.w       d0,d3                           * mmddyyyy
    swap        d3                              * yyyymmdd

* idle the bus and prepare return values
    move.b      #RTCCE|RTCDO|RTCSCLK,RTCSetLow(a0) * deselect the device and idle the bus
    move.l      d2,d0                           * return time of day
    move.l      d3,d1                           * ... and date
    andi        #NoCarry,ccr                    * success
    bra         getExit

* initialise clock to sane state
needInit
    move.l      #$07e60101,d1                   * jan 1st, 2022
    clr.l       d0                              * midnight
    bsr         SetTime                         * setting time inits RTC
    move.l      #$07e60101,d1                   * return the time just set
    clr.l       d0                              * midnight, success

getExit
* restore saved state and return
    movem.l     (a7)+,d2-d3/a0                  * restore registers
    move.w      (a7)+,sr                        * restore interrupt state
    rts

** detect
*
* Checks to see whether the RTC is (probably) present.
* Should be called with interrupts disabled.
*
* Input:
*   (a0)        DUART base address
*
* Output:
*   (cc)        Carry clear if RTC present, set otherwise.
*
* Uses:
*   (d0.b)      scratch
*
detect
    move.l      d0,-(a7)
    move.b      #0,RTCCtrl(a0)                  * enable GPIO outputs
    move.b      #RTCCE|RTCDO|RTCSCLK,RTCSetLow(a0) * ensure the bus is idle
    bsr         pause
    move.b      #RTCCE,RTCSetHigh(a0)           * select RTC
    bsr         pause
    move.b      #$8f,d0                         * read write-protect byte
    bsr         putByte                         * ... send
    bsr         pause
    bsr         getByte                         * get value
    move.b      #RTCCE|RTCDO|RTCSCLK,RTCSetLow(a0) * ensure the bus is idle
    andi.b      #$7f,d0                         * check low 7 bits
    beq         detectOut                       * ... MBZ, carry clear
    move.l      #E$NoClk,d1
    ori.w       #Carry,ccr                      * but isn't
detectOut
    move.l      (a7)+,d0
    rts


** pause
*
* Short timing pause.
*
pause
    nop
    nop
    nop
    nop
    rts

** bcdToBin
*
* Convert a two-digit BCD value to its binary representation.
*
* Input:
*   (d0.b)      2-digit BCD value
*
* Output:
*   (d0.l)      Binary value
*
bcdToBin:
    move.l      d1,-(a7)
    move.b      d0,d1
    andi.l      #$f,d0
    lsr.b       #4,d1
    andi.l      #$f,d1
    mulu        #10,d1
    add.l       d1,d0
    move.l      (a7)+,d1
    rts

** binToBCD
*
* Convert a binary value in the range 0-99 to its BCD representation.
*
* Input:
*   (d0.b)      Binary value
*
* Output:
*   (d0.b)      2-digit BCD value
*
binToBCD:
    move.l      d1,-(a7)
    clr.l       d1
    move.b      d0,d1
    divu        #10,d1                  * 1s digit in high word, 10s in low word
    asl.b       #4,d1                   * move 10s digit to correct position
    move.b      d1,d0                   * ... and place in result
    swap        d1                      * get 1s digit in low word
    or.b        d1,d0                   * ... and place in result
    move.l      (a7)+,d1
    rts

** putByte
*
* Send a byte, LSB first.
* 
* Input:
*   (d0.b)      byte to send (consumed)
*   (a0)        DUART base address
*
putByte:
    movem.w     d1,-(a7)
    move.w      #7,d1
pb_loop
    move.b      #RTCSCLK,RTCSetLow(a0)  * SCLK low
    ror.b       #1,d0
    bcs         pb_1
    move.b      #RTCDO,RTCSetLow(a0)    * TX low to write zero
    bra         pb_clk
pb_1
    move.b      #RTCDO,RTCSetHigh(a0)   * TX high to write one
    nop
pb_clk
    nop
    move.b      #RTCSCLK,RTCSetHigh(a0) * SCLK high to latch data
    nop
    dbra        d1,pb_loop
    movem.w     (a7)+,d1
    rts

** getByte
*
* Receive a byte, LSB first.
*
* Input:
*   (a0)        DUART base address
*
* Output:
*   (d0.l)      received byte
*
getByte:
    movem.w     d1,-(a7)
    clr.l       d0
    move.w      #7,d1
    move.b      #RTCDO,RTCSetHigh(a0)   * TX high to read data
gb_loop
    move.b      #RTCSCLK,RTCSetHigh(a0) * SCLK high
    nop
    move.b      #RTCSCLK,RTCSetLow(a0)  * SCLK low to drive data
    move.b      RTCIn(a0),d0            * data in bit RTCDI
    roxr.b      #RTCDI+1,d0             * rotate bit into X
    roxr.l      #1,d0                   * and X into MSByte
    dbra        d1,gb_loop
    rol.l       #8,d0                   * move MSByte to LSByte
    movem.w     (a7)+,d1
    rts

    endsect
